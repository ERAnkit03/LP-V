#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <omp.h>
#include <atomic>

using namespace std;

class Graph {
    int V; // Number of vertices
    vector<vector<int>> adj; // Adjacency list

public:
    Graph(int V);
    void addEdge(int u, int v);
    void parallelBFS(int start);
    void parallelDFS(int start);
};

Graph::Graph(int V) {
    this->V = V;
    adj.resize(V);
}

void Graph::addEdge(int u, int v) {
    adj[u].push_back(v);
    adj[v].push_back(u); // Undirected graph
}

// Parallel BFS using OpenMP
void Graph::parallelBFS(int start) {
    vector<bool> visited(V, false);
    queue<int> q;

    visited[start] = true;
    q.push(start);

    cout << "Parallel BFS starting from node " << start << ": ";

    while (!q.empty()) {
        int levelSize = q.size();

        #pragma omp parallel for
        for (int i = 0; i < levelSize; i++) {
            int node;

            #pragma omp critical
            {
                if (!q.empty()) {
                    node = q.front();
                    q.pop();
                    cout << node << " ";
                }
            }

            #pragma omp parallel for
            for (int j = 0; j < adj[node].size(); j++) {
                int neighbor = adj[node][j];

                #pragma omp critical
                {
                    if (!visited[neighbor]) {
                        visited[neighbor] = true;
                        q.push(neighbor);
                    }
                }
            }
        }
    }
    cout << endl;
}

// Parallel DFS using OpenMP (limited parallelism)
void Graph::parallelDFS(int start) {
    vector<atomic<bool>> visited(V);
    for (auto& v : visited) v = false;

    stack<int> s;
    s.push(start);
    visited[start] = true;

    cout << "Parallel DFS starting from node " << start << ": ";

    while (!s.empty()) {
        int node = s.top();
        s.pop();
        cout << node << " ";

        #pragma omp parallel for
        for (int i = 0; i < adj[node].size(); i++) {
            int neighbor = adj[node][i];

            if (!visited[neighbor]) {
                visited[neighbor] = true;

                #pragma omp critical
                {
                    s.push(neighbor);
                }
            }
        }
    }
    cout << endl;
}

int main() {
    Graph g(7);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 5);
    g.addEdge(2, 6);

    g.parallelBFS(0);
    g.parallelDFS(0);

    return 0;
}
